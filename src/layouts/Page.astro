---
/* interface Props {
	title: string;
} */

import { Image } from "astro:assets";
import logo from "../images/logo.png";
import { AdminCheck } from "../utils/adminCheck"

const { title } = Astro.props;
const navItems = [
  {
    path: "/shop",
    label: "Shop",
  },
  {
    path: "/blog",
    label: "Blog",
  },
  {
    path: "/about",
    label: "About",
  },
];
const data = await AdminCheck(Astro.cookies);
console.log("data is: ",data);
console.log(Astro.url.pathname)
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;1,400;1,600&family=Playfair+Display&display=swap" rel="stylesheet">
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-main">
    <header class="flex flex-colum space-x-4 w-full items-center px-2 lg:px-10 py-4 border-b border-activate shadow-md bg-main fixed top-0 left-0 z-50">
      <a href="/" rel="home" class={`flex flex-row justify-center items-center gap-2 transition group duration-300 ${Astro.url.pathname.toString() === "/" ? "text-activate": "text-not-activate hover:text-activate"}`}>
        <Image
          src={logo}
          alt="Green&Fresh Logo"
          quality={"max"}
          loading="eager"
          decoding="async"
          class={`w-[50px] h-[50px] p-1 rounded-full transition duration-300 ${Astro.url.pathname.toString() === "/" ? "bg-white": "bg-[#d4d4d4] group-hover:bg-white"}`}
        />
         <h1>Romina Fabi</h1>
      </a>
      <div class="hidden grow md:flex flex-row items-center justify-end gap-4">
         <nav class="flex flex-row gap-4 ">
            {
              navItems.map((item) => {
                return <a href={item.path} class={Astro.url.pathname.toString() === item.path ? "text-activate text-sm": "text-not-activate hover:text-activate transition duration-300"}>{item.label}</a>;
              })
            }
          </nav>
          {data.email ? (
             <form action="/api/auth/signout">
          <button type="submit" class=" bg-indigo-500 hover:bg-indigo-600 text-white duration-300 transition py-2 px-8">Sign out</button>
        </form>
          ): ( null/* <a href="/register" class="py-2 px-8 bg-lime-500 rounded-lg hover:bg-lime-600 transition duration-300 text-lime-700 hover:text-lime-200">Sign up now</a> */)
          }
      </div>
      <div class="flex md:hidden items-center justify-end flex-row grow">
         <button class="menu__toggle r-button" type="button" aria-controls="main-menu" aria-expanded="false">
            <span class="menu__hamburger m-hamburger">
              <span class="m-hamburger__label">
                <span class="menu__toggle-hint screen-reader">Open menu</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="white" class="bi bi-list" viewBox="0 0 16 16">
                  <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"/>
                </svg>
              </span>
            </span>
          </button>
      </div>
    </header>
    <main class=" mt-24">
      <slot />
    </main>
    <footer>
      <p>
        <a href="https://jason.af/links">created by Jason Lengstorf</a>
        <a href="#frontend-masters-link"
          >learn to build this on Frontend Masters</a
        >
        <a href="https://github.com/learnwithjason/astro-frontend-masters"
          >source code</a
        >
      </p>
    </footer>
  </body>
</html>

<style is:global>
  :root {
    --color-gray-100: hsl(275, 30%, 95%);
    --color-gray-200: hsl(275, 21%, 85%);
    --color-gray-600: hsl(275, 11%, 43%);
    --color-gray-700: hsl(275, 26%, 23%);
    --color-gray-800: hsl(275deg 40% 20% / 1);
    --color-gray-900: hsl(275deg 40% 10% / 1);
  }

  * {
    box-sizing: border-box;
  }

  html {
    font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
    line-height: 1.45;
  }

  body {
    margin: 0;
  }

  :is(h1) {
    font-family: 'Playfair Display', serif;
    font-weight: 400;
    line-height: 1.1;
    margin: 1.5rem 0 0;
  }

  .block {
    padding: 3rem max(5vw, calc((100% - 800px) / 2));
  }

  .big-link {
    background-color: var(--color-gray-900);
    border: 0;
    border-radius: 0.25rem;
    color: white;
    display: inline-block;
    font-size: 1rem;
    font-weight: 700;
    margin: 0.5rem 0 0;
    padding: 0.5rem 1.25rem;
    text-decoration: none;
    transition: 150ms background-color linear;
  }

  .big-link:hover {
    background-color: var(--color-gray-800);
  }

  .big-link:is(:active, :focus) {
    outline: 2px solid var(--color-gray-900);
    outline-offset: 4px;
  }
</style>
<style>
   header {
      border-color: rgb(38 38 38 / var(--tw-border-opacity));
      border-bottom-width: 1px;
   }

  a[rel="home"] {
   font-family: 'Open Sans', sans-serif;
    font-size: 1.5rem;
    font-weight: 500;
    text-decoration: none;
  }
  nav li{
   font-family: 'Open Sans', sans-serif;
   font-weight: 500;
  }

  footer {
    font-size: 0.75rem;
    padding: 3rem 5% 2rem;
  }

  footer p {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    justify-content: center;
  }

  footer a {
    color: var(--color-gray-600);
    display: block;
  }

  @media (min-width: 400px) {
    header {
      flex-direction: row;
    }
  }

  .screen-reader{
  width: var(--screenReaderWidth, 1px) !important;
  height: var(--screenReaderHeight, 1px) !important;
  padding: var(--screenReaderPadding, 0) !important;
  border: var(--screenReaderBorder, none) !important;

  position: var(--screenReaderPosition, absolute) !important;
  clip: var(--screenReaderClip, rect(1px, 1px, 1px, 1px)) !important;
  overflow: var(--screenReaderOverflow, hidden) !important;
}
</style>
